package main

import (
    "fmt"
	"net/http"
    "io/ioutil"
	"os"
	"io"
	"strings"
	"strconv"
)

type File struct {
    r io.Reader
    name string
    size int64
}

func oneFichierLogin(user string, pass string) {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	body := strings.NewReader(`mail=`+user+`&pass=`+pass+`&lt=on&other=on&valider=OK`)
	req, err := http.NewRequest("POST", "https://1fichier.com/login.pl", body)
	if err != nil {
		// handle err
	}
	req.Header.Set("Connection", "keep-alive")
	req.Header.Set("Cache-Control", "max-age=0")
	req.Header.Set("Origin", "https://1fichier.com")
	req.Header.Set("Upgrade-Insecure-Requests", "1")
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	req.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36 OPR/56.0.3051.52")
	req.Header.Set("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8")
	req.Header.Set("Referer", "https://1fichier.com/login.pl")
	req.Header.Set("Accept-Encoding", "gzip, deflate, br")
	req.Header.Set("Accept-Language", "en-US,en;q=0.9")
	req.Header.Set("Cookie", "show_cm=no; SID=")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		// handle err
	}
	defer resp.Body.Close()

	loginCookie := resp.Header["Set-Cookie"]

	file, ferr := os.Create("login-cookie")
	if ferr != nil {
		// handle err
	}
	defer file.Close()

	fmt.Fprintf(file, strings.Join(loginCookie, " "))
}

func oneFichierDownload(link string) File{
	cookieSession, err := ioutil.ReadFile("login-cookie")
	if err != nil {
		// handle err
	}

	req, err := http.NewRequest("GET", link, nil)
	if err != nil {
		// handle err
	}
	req.Header.Set("Connection", "keep-alive")
	req.Header.Set("Upgrade-Insecure-Requests", "1")
	req.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36 OPR/56.0.3051.52")
	req.Header.Set("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8")
	req.Header.Set("Referer", "https://www.google.com")
	req.Header.Set("Accept-Encoding", "gzip, deflate, br")
	req.Header.Set("Accept-Language", "en-US,en;q=0.9")
	req.Header.Set("Cookie", string(cookieSession))

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		// handle err
	}
	defer resp.Body.Close()

	filename := strings.Split(strings.Join(resp.Header["Content-Disposition"], " "), "\"")[1]
	filesize, err := strconv.ParseInt(strings.Join(resp.Header["Content-Length"], " "), 10, 64)
	if err != nil {
		// handle err
	}

	//delibrete: If you want to download the file, uncomment these lines
	// out, err := os.Create(filename)
	// defer out.Close()
	// io.Copy(out, resp.Body)

	return File{resp.Body, filename, filesize}
}

func main() {
	user := strings.Replace(os.Args[1], "@", "%40", 1)
	pass := os.Args[2]
	link := os.Args[3]

	oneFichierLogin(user, pass)
	st := oneFichierDownload(link)

	fmt.Println("Filename: ", st.name);
	fmt.Println("Filesize: ", st.size);
}